{
  "name": "pg",
  "version": "3.6.2",
  "description": "PostgreSQL client - pure javascript & libpq with the same API",
  "keywords": [
    "postgres",
    "pg",
    "libpq",
    "postgre",
    "database",
    "rdbms"
  ],
  "homepage": "http://github.com/brianc/node-postgres",
  "repository": {
    "type": "git",
    "url": "git://github.com/brianc/node-postgres.git"
  },
  "author": {
    "name": "Brian Carlson",
    "email": "brian.m.carlson@gmail.com"
  },
  "main": "./lib",
  "dependencies": {
    "bindings": "1.2.1",
    "buffer-writer": "1.0.0",
    "generic-pool": "2.1.1",
    "nan": "1.3.0",
    "packet-reader": "0.2.0",
    "pg-connection-string": "0.1.3",
    "pg-types": "1.6.0",
    "pgpass": "0.0.3"
  },
  "devDependencies": {
    "jshint": "2.5.2",
    "semver": "~3.0.1",
    "async": "0.9.0"
  },
  "scripts": {
    "changelog": "npm i github-changes && ./node_modules/.bin/github-changes -o brianc -r node-postgres -d pulls -a -v",
    "test": "make test-travis connectionString=postgres://postgres@localhost:5432/postgres",
    "install": "node-gyp rebuild || (exit 0)"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "readme": "#node-postgres\n\n[![Build Status](https://secure.travis-ci.org/brianc/node-postgres.png?branch=master)](http://travis-ci.org/brianc/node-postgres)\n\nPostgreSQL client for node.js.  Pure JavaScript and native libpq bindings.\n\n## Installation\n\n    npm install pg\n\n\n## Examples\n\n### Client pooling\n\nGenerally you will access the PostgreSQL server through a pool of clients.  A client takes a non-trivial amount of time to establish a new connection. A client also consumes a non-trivial amount of resources on the PostgreSQL server - not something you want to do on every http request. Good news: node-postgres ships with built in client pooling.\n\n```javascript\nvar pg = require('pg');\nvar conString = \"postgres://username:password@localhost/database\";\n\npg.connect(conString, function(err, client, done) {\n  if(err) {\n    return console.error('error fetching client from pool', err);\n  }\n  client.query('SELECT $1::int AS number', ['1'], function(err, result) {\n    //call `done()` to release the client back to the pool\n    done();\n    \n    if(err) {\n      return console.error('error running query', err);\n    }\n    console.log(result.rows[0].number);\n    //output: 1\n  });\n});\n\n```\n\n[Check this out for the get up and running quickly example](https://github.com/brianc/node-postgres/wiki/Example)\n\n### Simple\n\nSometimes you may not want to use a pool of connections.  You can easily connect a single client to a postgres instance, run a query, and disconnect.\n\n```javascript\nvar pg = require('pg'); \n//or native libpq bindings\n//var pg = require('pg').native\n\nvar conString = \"postgres://username:password@localhost/database\";\n\nvar client = new pg.Client(conString);\nclient.connect(function(err) {\n  if(err) {\n    return console.error('could not connect to postgres', err);\n  }\n  client.query('SELECT NOW() AS \"theTime\"', function(err, result) {\n    if(err) {\n      return console.error('error running query', err);\n    }\n    console.log(result.rows[0].theTime);\n    //output: Tue Jan 15 2013 19:12:47 GMT-600 (CST)\n    client.end();\n  });\n});\n\n```\n\n## [Documentation](https://github.com/brianc/node-postgres/wiki)\n\n## Native Bindings\n\nnode-postgres contains a pure JavaScript driver and also exposes JavaScript bindings via libpq.  You can use either interface.  I personally use the JavaScript bindings as they are quite fast, and I like having everything implemented in JavaScript.\n\nTo use native libpq bindings replace `require('pg')` with `require('pg').native`.  If you __do not__ need or want the native bindings at all, consider using [node-postgres-pure](https://github.com/brianc/node-postgres-pure) instead which does not include them.\n\nThe two share the same interface so __no other code changes should be required__.  If you find yourself having to change code other than the require statement when switching from `pg` to `pg.native` or `pg.js`, please report an issue.\n\n## Features\n\n* pure JavaScript client and native libpq bindings share _the same api_\n* optional connection pooling\n* extensible js<->postgresql data-type coercion\n* supported PostgreSQL features\n  * parameterized queries\n  * named statements with query plan caching\n  * async notifications with `LISTEN/NOTIFY`\n  * bulk import & export with `COPY TO/COPY FROM`\n\n## Contributing\n\n__I love contributions.__\n\nYou are welcome contribute via pull requests.  If you need help getting the tests running locally feel free to email me or gchat me.\n\nI will __happily__ accept your pull request if it:\n- _)has tests__\n- looks reasonable\n- does not break backwards compatibility\n- satisfies jshint\n\nInformation about the testing processes is in the [wiki](https://github.com/brianc/node-postgres/wiki/Testing).\n\nIf you need help or have questions about constructing a pull request I'll be glad to help out as well.\n\n## Support\n\nIf at all possible when you open an issue please provide\n- version of node\n- version of postgres\n- smallest possible snippet of code to reproduce the problem\n\nUsually I'll pop the code into the repo as a test.  Hopefully the test fails.  Then I make the test pass.  Then everyone's happy!\n\n\nIf you need help or run into _any_ issues getting node-postgres to work on your system please report a bug or contact me directly.  I am usually available via google-talk at my github account public email address.\n\nI usually tweet about any important status updates or changes to node-postgres.  \nFollow me [@briancarlson](https://twitter.com/briancarlson) to keep up to date.\n\n\n## Extras\n\nnode-postgres is by design _low level_ with the bare minimum of abstraction.  These might help out:\n\n- [brianc/node-pg-native](https://github.com/brianc/node-pg-native) - Simple interface abstraction on top of [libpq](https://github.com/brianc/node-libpq)\n- [brianc/node-pg-query-stream](https://github.com/brianc/node-pg-query-stream) - Query results from node-postgres as a readable (object) stream\n- [brianc/node-pg-cursor](https://github.com/brianc/node-pg-cursor) - Query cursor extension for node-postgres\n- [brianc/node-pg-copy-streams](https://github.com/brianc/node-pg-copy-streams) - COPY FROM / COPY TO for node-postgres. Stream from one database to another, and stuff.\n- [brianc/node-postgres-pure](https://github.com/brianc/node-postgres-pure) - node-postgres without any of the C/C++ stuff\n- [brianc/node-pg-types](https://github.com/brianc/node-pg-types) - Type parsing for node-postgres\n- [Suor/pg-bricks](https://github.com/Suor/pg-bricks) - A higher level wrapper around node-postgres to handle connection settings, sql generation, transactions and ease data access.\n- [grncdr/node-any-db](https://github.com/grncdr/node-any-db) - Thin and less-opinionated database abstraction layer for node.\n- [brianc/node-sql](https://github.com/brianc/node-sql) - SQL generation for node.js\n- [hiddentao/suqel](https://hiddentao.github.io/squel/) - SQL query string builder for Javascript\n- [CSNW/sql-bricks](https://github.com/CSNW/sql-bricks) - Transparent, Schemaless SQL Generation\n\n\n### Windows\n \n 1. Install Visual Studio C++ (successfully built with Express 2010). Express is free.\n 2. Add your Postgre Installation's `bin` folder to the system path (i.e. `C:\\Program Files\\PostgreSQL\\9.3\\bin`).\n 3. Make sure that both `libpq.dll` and `pg_config.exe` are in that folder.\n 4. `npm install pg`\n\n\n## License\n\nCopyright (c) 2010-2014 Brian Carlson (brian.m.carlson@gmail.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/brianc/node-postgres/issues"
  },
  "_id": "pg@3.6.2",
  "_from": "pg@^3.5.0"
}
